import '../models/position.dart';
import '../utils/board_enums.dart';

PlayerColor boardSideTo(Position position) {
  final playerColorCandidate = _sideData[position];
  if (playerColorCandidate != null) {
    return playerColorCandidate;
  }
  throw Exception("Incomplete sideData - Developer error");
}

const Map<Position, PlayerColor> _sideData = {
  Position.A1: PlayerColor.white,
  Position.B1: PlayerColor.white,
  Position.C1: PlayerColor.white,
  Position.D1: PlayerColor.white,
  Position.E1: PlayerColor.white,
  Position.F1: PlayerColor.white,
  Position.G1: PlayerColor.white,
  Position.H1: PlayerColor.white,
  Position.A2: PlayerColor.white,
  Position.B2: PlayerColor.white,
  Position.C2: PlayerColor.white,
  Position.D2: PlayerColor.white,
  Position.E2: PlayerColor.white,
  Position.F2: PlayerColor.white,
  Position.G2: PlayerColor.white,
  Position.H2: PlayerColor.white,
  Position.A3: PlayerColor.white,
  Position.B3: PlayerColor.white,
  Position.C3: PlayerColor.white,
  Position.D3: PlayerColor.white,
  Position.E3: PlayerColor.white,
  Position.F3: PlayerColor.white,
  Position.G3: PlayerColor.white,
  Position.H3: PlayerColor.white,
  Position.A4: PlayerColor.white,
  Position.B4: PlayerColor.white,
  Position.C4: PlayerColor.white,
  Position.D4: PlayerColor.white,
  Position.E4: PlayerColor.white,
  Position.F4: PlayerColor.white,
  Position.G4: PlayerColor.white,
  Position.H4: PlayerColor.white,
  Position.L8: PlayerColor.black,
  Position.K8: PlayerColor.black,
  Position.J8: PlayerColor.black,
  Position.I8: PlayerColor.black,
  Position.D8: PlayerColor.black,
  Position.C8: PlayerColor.black,
  Position.B8: PlayerColor.black,
  Position.A8: PlayerColor.black,
  Position.L7: PlayerColor.black,
  Position.K7: PlayerColor.black,
  Position.J7: PlayerColor.black,
  Position.I7: PlayerColor.black,
  Position.D7: PlayerColor.black,
  Position.C7: PlayerColor.black,
  Position.B7: PlayerColor.black,
  Position.A7: PlayerColor.black,
  Position.L6: PlayerColor.black,
  Position.K6: PlayerColor.black,
  Position.J6: PlayerColor.black,
  Position.I6: PlayerColor.black,
  Position.D6: PlayerColor.black,
  Position.C6: PlayerColor.black,
  Position.B6: PlayerColor.black,
  Position.A6: PlayerColor.black,
  Position.L5: PlayerColor.black,
  Position.K5: PlayerColor.black,
  Position.J5: PlayerColor.black,
  Position.I5: PlayerColor.black,
  Position.D5: PlayerColor.black,
  Position.C5: PlayerColor.black,
  Position.B5: PlayerColor.black,
  Position.A5: PlayerColor.black,
  Position.H12: PlayerColor.red,
  Position.G12: PlayerColor.red,
  Position.F12: PlayerColor.red,
  Position.E12: PlayerColor.red,
  Position.I12: PlayerColor.red,
  Position.J12: PlayerColor.red,
  Position.K12: PlayerColor.red,
  Position.L12: PlayerColor.red,
  Position.H11: PlayerColor.red,
  Position.G11: PlayerColor.red,
  Position.F11: PlayerColor.red,
  Position.E11: PlayerColor.red,
  Position.I11: PlayerColor.red,
  Position.J11: PlayerColor.red,
  Position.K11: PlayerColor.red,
  Position.L11: PlayerColor.red,
  Position.H10: PlayerColor.red,
  Position.G10: PlayerColor.red,
  Position.F10: PlayerColor.red,
  Position.E10: PlayerColor.red,
  Position.I10: PlayerColor.red,
  Position.J10: PlayerColor.red,
  Position.K10: PlayerColor.red,
  Position.L10: PlayerColor.red,
  Position.H9: PlayerColor.red,
  Position.G9: PlayerColor.red,
  Position.F9: PlayerColor.red,
  Position.E9: PlayerColor.red,
  Position.I9: PlayerColor.red,
  Position.J9: PlayerColor.red,
  Position.K9: PlayerColor.red,
  Position.L9: PlayerColor.red,
};
